image: ruby:2.3

stages:
  - tests
  - build
  - deploy
  - certificates

cache:
  paths:
    - vendor


##############
# Tests
##############
test:
  stage: tests
  script:
    - apt-get update -yqqq
    - apt-get install -y nodejs
    - bundle install --path vendor
    - bundle exec middleman build
  except:
    - master
    - schedules

##############
# Build
##############
pages:
  stage: build
  script:
    - apt-get update -yqqq
    - apt-get install -y nodejs
    - bundle install --path vendor
    - bundle exec middleman build
  after_script:
    - mv build/ public/
  artifacts:
    paths:
      - public
  only:
    - master
  except:
    - schedules

################
# Deploy
################
.before_script: &before_deploy
  - apt-get update -y && apt-get install openssh-client rsync -y
  - eval $(ssh-agent -s)
  - echo "$DEPLOY_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

deploy-to-server:
  stage: deploy
  before_script: *before_deploy
  script:
    - rsync -avzhO --no-p --delete -e ssh public/ $DEPLOY_USER@$DEPLOY_HOST:/var/www/docs.openfuture.io/
  environment:
    name: production
    url: https://docs.openfuture.io
  only:
    - master
  except:
    - schedules

################
# Certificates
################
certificates:
  stage: certificates
  script:
    - |
      ssh ${DEPLOY_USER}@${DEPLOY_HOST} "
        docker run --rm --name certbot \
        -v /etc/letsencrypt:/etc/letsencrypt \
        -v /var/www/certbot:/var/www/certbot \
        -v /var/log/letsencrypt:/var/log/letsencrypt \
        certbot/certbot \
        certonly --webroot -w /var/www/certbot/ \
        -d docs.openfuture.io \
        --renew-by-default -m devops@zensoft.io --eff-email --agree-tos --manual-public-ip-logging-ok
      "
    - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo service nginx reload"
  environment:
    name: production
  only:
    - schedules